<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
FiCon v1.00 by lostar-igor
Файловый менеджер для ESP8266
-->
<html>
	<head>
		<meta charset="utf-8" />
		<title>FiCon</title>
		
		<style type="text/css" media="screen">
			#titleStyles { 
				position: absolute;
				top: 0px;
				left: 10px;
				height: 30px;
				width: 800px;
				text-align: center;
				font-size: 16px;
				font-weight: bold;
			}
			#keyStyles { 
				position: absolute;
				top: 31px;
				left: 10px;
				height: 30px;
				width: 800px;
				text-align: center;
			}
			#leftListFilesStyles { 
				position: absolute;
				top: 61px;
				left: 10px;
				height: 400px;
				width: 400px;
				float: left;
			}
			#leftListFilesStyles option:checked {
					background: linear-gradient(gray, blue);
			}
			#rightListFilesStyles { 
				position: absolute;
				top: 61px;
				left: 411px;
				width: 400px;
				height: 400px;
				float: left;
			}
			#rightListFilesStyles option:checked {
				background: linear-gradient(gray, blue);
			}
			#leftListFilesSelect { 
				font-family: "Serif";
				width: 100%;
				font-weight: bold;
				font-size: 15px;
			}
			#leftListFilesSelect option {
					height: 18px;
					padding: 0px 5px;
				}
			#rightListFilesSelect { 
				font-family: "Serif";
				width: 100%;
				font-weight: bold;
				font-size: 15px;
			}
			#rightListFilesSelect option {
					height: 18px;
					padding: 0px 5px;
				}
			#leftSelectFilesStyles {
				height: 25px;
				text-align: center;
				font-size: 16px;
			}
			#rightSelectFilesStyles {
				height: 25px;
				text-align: center;
				font-size: 16px;
			}
			#statusFilesStyles {
				position: absolute;
				left: 10px;
				bottom: 0px;
				height: 25px;
				width: 800px;
				text-align: center;
				font-size: 16px;
			}

			#loading {
				position:absolute;
				/* note: changing between block and none cancels the opacity anim, so we move it in and out of screen instead by changing the top value
				maybe see https://www.impressivewebs.com/animate-display-block-none/ for another approach */
				display:block; 
				top: -100vh;
				left: 0;
				width: 100vw;
				height: 100vh;
				z-index: 100;
				background-color: rgba(0, 0, 0, 0.5);
				opacity: 0;
				transition: opacity 5ms ease-in-out;
			}
			#loading.shown {
				top: 0;
				opacity: 1;
			}
			#loading-msg {
				display: inline-block;
				position: absolute;
				top: 0px;
				left: 50%;
				transform: translateX(-50%);
				color:white;
				font-size: 32px;
			}
			@keyframes spinner-anim {
				0% {
					transform: rotate(0deg);
				}
				100% {
					transform: rotate(360deg);
				}
			}
			/* :not(:required) hides this rule from IE9 and below */
			.spinner-anim:not(:required) {
				display: inline-block;
				position: relative;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				animation: spinner-anim 1s infinite linear;
				border: 16px solid #eee;
				border-right-color: transparent;
				border-radius: 32px;
				box-sizing: border-box;
				overflow: hidden;
				text-indent: -9999px;
				width: 64px;
				height: 64px;
			}

		</style>
		
		<script type="text/javascript">
			// Вычисление и установка размеров панелей
			function panelSizing() {

				let fontSize = 15; // Размер шрифта в панелях в px
				let panelsWidth = 800; // Ширина 2-х панелей по умолчанию в px
				
				let titleDiv = document.getElementById("titleStyles"); // Заголовок
				let keyDiv = document.getElementById("keyStyles"); // Кнопки
				let leftListFilesDiv = document.getElementById("leftListFilesStyles"); // Div с левой панелью
				let rightListFilesDiv = document.getElementById("rightListFilesStyles"); // Div с правой панелью
				let statusDiv = document.getElementById("statusFilesStyles"); // Подвал
				let docHeight = document.documentElement.clientHeight; // Высота окна браузера
				let docWidth = document.documentElement.clientWidth; // Ширина окна браузера
				let titleHeight = titleDiv.offsetHeight; // Высота div заголовка
				let keyHeight = keyDiv.offsetHeight; // Высота div кнопок
				let statusHeight = statusDiv.offsetHeight; // Высота div подвала
				
				let n = docHeight - titleHeight - keyHeight - statusHeight; // Высота div пенелей в px
				leftListFilesDiv.offsetHeight = n;
				rightListFilesDiv.offsetHeight = n;
				
				n = Math.trunc((n - 20) / (fontSize + 3)); // Количество строк в панелях
				leftListFileSystem.size = n;
				rightListFileSystem.size = n;
				
				if (docWidth > panelsWidth) {
					n = Math.trunc((docWidth - panelsWidth) / 2); // Отступ от левого края окна браузера
				}
			}
			
			// Обработка горячих клавиш
			// Нажатие клавиши
			function hotKeyDown() {
				return function(event) {
					let id = event.keyCode;
					if (id == 16) keyShift = true;
				}
			}
			// Отпускание клавиши
			function hotKeyUp() {
				return function(event) {
					let id = event.keyCode;
					if (id == 16) keyShift = false;
					if (event.altKey && event.ctrlKey && !event.shiftKey) {
						if (id == 49 || id == 50) listOption(id); // <Alt>+<Ctrl>+<1> или <Alt>+<Ctrl>+<2> переключение списков панелей
						if (id == 111) rootOption(); // <Alt>+<Ctrl>+</> (цифравая клавиатура) Выход в корневой каталог
						if (id == 85) input.click(); // Upload <Alt>+<Ctrl>+<U>
						if (id == 68) deleteOption(); // Delete <Alt>+<Ctrl>+<D>
						if (id == 76) downloadOption(); // downLoad <Alt>+<Ctrl>+<L>
						if (id == 82) renameOption(); // Rename <Alt>+<Ctrl>+<R>
						if (id == 77) moveOption(); // Move <Alt>+<Ctrl>+<M>
						if (id == 67) copyOption(); // Copy <Alt>+<Ctrl>+<C>
						if (id == 73) newItemOption(); // newItem <Alt>+<Ctrl>+<I>
						if (id == 32) rebuildOption(); // rebuild <Alt>+<Ctrl>+<Space>
						if (id == 70) formatOption(); // format <Alt>+<Ctrl>+<F>
					}
					if (!event.altKey && !event.ctrlKey && event.shiftKey && id == 32) { // Смена активной панели <Shift>+<Space>
						activePanel = !activePanel;
						focusActivePanel(); // Фокус на активную панель
					}
					if (!event.altKey && !event.ctrlKey && !event.shiftKey && id == 13) runOption(false); // Run <Enter>
					if (!event.altKey && !event.ctrlKey && event.shiftKey && id == 13) runOption(true); // Run в новой вкладке <Shift>+<Enter>
				}
			}
			// Вывод сообщения с кодом ошибки при выполнении запросов
			// request - имя запроса
			function showHttpError(request) {
				alert("ERROR: [" + request.status+"] " + request.responseText);
			}
			
			// Отображение процессов работы с файлами
			// show - truу : вывести сообщение; false : убрать сообщение 
			function setLoading(show, message) {
				if (message) console.log(message);        
				document.getElementById("loading-msg").innerHTML = message ? message : "";
				if (show) document.getElementById("loading").classList.add("shown");
				else      document.getElementById("loading").classList.remove("shown");
				document.body.style.cursor = show ? "wait" : "default";
			}

			// Преобразование размера файла
			// bytes - размер файла в байтах
			function readableSize(bytes) {
				if (bytes < 1024) return bytes + " B";          
				let units = [' kB', ' MB', ' GB', ' TB'];
				let i = -1;
				do {
					bytes = bytes / 1024;
					i++;
				} while (bytes > 1024);
				return bytes.toFixed(2) + units[i];
			}
			
			// Проверка введенного имени на "неправильные" символы, длину
			// name - проверяемое имя
			// path - путь в целевой панели
			// Выход: true - соответствует, false - нет
			function verifiName(name, path) {
				if (name != "null" && name.length != 0) {
					if (name.search(/[\\:"\|\*<>\?]/) == -1) {
						if (!name.startsWith("/")) name = path + name;
						if (name.length > 30) { // Слишком длинное имя 
							alert (path + name + "\n\nItem name too long!");
							return false;
						} else return true;
					} else {
						alert(path + name + "\n\nInvalid characters in the name!");
						return false;
					}
				} else {
					alert(path + name + "\n\nEmpty name!");
					return false;
				}
			}
			
			// Обновление инормации о состоянии файловой системы
			function refreshStatus(){
				document.getElementById("statusFilesStyles").innerHTML = "(refreshing...)";
				let textStatus = ""; // Строка статуса
				let xmlHttp = new XMLHttpRequest();
				xmlHttp.onload = function() {
					if (xmlHttp.status != 200) showHttpError(xmlHttp);
					else {            
						fsInfo = JSON.parse(xmlHttp.responseText);
						if (fsInfo.isOk) {
							freeSizeFS = fsInfo.totalBytes - fsInfo.usedBytes; // количество свободных байт
							textStatus = readableSize(freeSizeFS) + " free of " + readableSize(fsInfo.totalBytes) + ". " + nSPIFFS  + " file(s)";
						} 
						else {
							status += "<span style='background-color:red;color:white;font-weight:bold'>INIT ERROR !</span>";
						}
						document.getElementById("statusFilesStyles").innerHTML = textStatus;
					}
				};
				xmlHttp.open("GET", deviceAddress + "/ficonStatus", false);
				xmlHttp.send(null);
			}

			// Функция, выполняемая после http-запроса
			// req - имя запроса
			//function onOperationComplete(req, path){
			function onOperationComplete(req){
				return function(){
					if (req.status != 200) showHttpError(req); // Если сервер вернул сообщение об ошибке, выводим его
					refreshStatus(); // Обновление данных ФС
				}
			}

			// Загрузка файла в ESP8266
			// type - тип передаваемых данных (File)
			// name - имя передаваемого файла
			function httpUpload(type, name) {
				setLoading(true, "Uploading '" + name + "'..."); // Индикация загрузки
				if (!name.startsWith("/")) name = "/" + name; // Проверка на наличие заглавного слэша
				let xmlHttp = new XMLHttpRequest();	// Запрос на передачу данных через форму
				xmlHttp.onload = onOperationComplete(xmlHttp); // Вызов функции после выполнения запроса
				let formData = new FormData();
				formData.append("data", type, name);
				xmlHttp.open("POST", deviceAddress + "/ficonUpload", false);
				xmlHttp.send(formData);
			}

			// Скачивание файла из ESP8266
			// name - имя скачиваемого файла
			function httpDownload(name) {
				let link = document.createElement('a');
				link.setAttribute('href', deviceAddress + "/" + name);
				name = name.slice(name.lastIndexOf("/") + 1);
				link.setAttribute('download', name);
				link.click();
			}

			// Удаление файла в ESP8266
			// name - имя удаляемого файла
			function httpDelete(name) {
				setLoading(true, "Deleting '" + name + "'..."); // Индикация удаления
				if (!name.startsWith("/")) name = "/" + name; // Проверка на наличие заглавного слэша
				let xmlHttp = new XMLHttpRequest();
				xmlHttp.onload = onOperationComplete(xmlHttp); // Вызов функции после выполнения запроса
				let formData = new FormData();
				formData.append("data", name);
				xmlHttp.open("POST", deviceAddress + "/ficonDelete", false);
				xmlHttp.send(formData);
			}

			// Переименование файла
			// srcName - исходное имя
			// newName - новое имя
			function httpRename(srcName, newName){
				setLoading(true, "Renaming '" + srcName + "' to '" + newName + "'...");
				if (!newName.startsWith("/")) newName = "/" + newName;
				if (!srcName.startsWith("/")) srcName = "/" + srcName;
				let xmlHttp = new XMLHttpRequest();
				xmlHttp.onload = onOperationComplete(xmlHttp);
				let formData = new FormData();
				formData.append("dst", newName);
				formData.append("src", srcName);
				xmlHttp.open("POST", deviceAddress + "/ficonFileCRM", false);
				xmlHttp.send(formData);
			}

			// Копирование файла
			// srcName - файл источник
			// newName - новый файл
			function httpCopy(srcName, newName){
				setLoading(true, "Copy '" + srcName + "' to '" + newName + "'...");
				if (!newName.startsWith("/")) newName = "/" + newName;
				if (!srcName.startsWith("/")) srcName = "/" + srcName;
				let xmlHttp = new XMLHttpRequest();
				xmlHttp.onload = onOperationComplete(xmlHttp);
				let formData = new FormData();
				formData.append("dst", newName);
				formData.append("src", srcName);
				xmlHttp.open("POST", deviceAddress + "/ficonCopy", false);
				xmlHttp.send(formData);
			}

			// Новый элемент
			// name - имя нового элемента SPIFFS
			function httpNewItem(name) {
				setLoading(true, "'" + name + "' item is created...");
				if (!name.startsWith("/")) name = "/" + name;
				let xmlHttp = new XMLHttpRequest();
				xmlHttp.onload = onOperationComplete(xmlHttp);
				let formData = new FormData();
				formData.append("dst", name);
				xmlHttp.open("POST", deviceAddress + "/ficonFileCRM", false);
				xmlHttp.send(formData);
			}
			
			// ------------------------------------------------------------------------------------
			// Форматирование ФС
			function httpFormat() {
				setLoading(true, "Formatting the SPIFFS ..."); // Индикация
				let xmlHttp = new XMLHttpRequest();
				xmlHttp.onload = onOperationComplete(xmlHttp);
				xmlHttp.open("GET", deviceAddress + "/ficonFormat", false);
				xmlHttp.send(null);
				getListFiles();
				rebuildLeftPanel();
				rebuildRightPanel();
			}

			// ------------------------------------------------------------------------------------
			// Получение списка файлов из SPIFFS ESP8266
			// Выход: true - удачно; false - ошибка чтения
			function getListFiles() {
				setLoading(true, "Downloading file list ..."); // Индикация загрузки списка файлов
				let xmlHttp = new XMLHttpRequest();
				xmlHttp.onload = function() { // Вызов функции после выполнения запроса
					setLoading(false); // Выключение индикации файловой операции
					httpSatus = xmlHttp.status;
					if (xmlHttp.status != 200) {
						showHttpError(xmlHttp);
					} else {
						aSPIFFS = JSON.parse(xmlHttp.responseText);
						nSPIFFS  = aSPIFFS.length; // Количество файлов в SPIFFS
					}
					refreshStatus(); // Обновление информации о SPIFFS
				}
				xmlHttp.open('GET', deviceAddress + '/ficonFiles', false); //Получение списка файлов по URL "/ficonFiles"
				xmlHttp.send(null);
			}

			// ------------------------------------------------------------------------------------
			// Подсветка файла по его индексу после построения панелей
			// sIndex - цифровой индекс подсвечиваемого элементва списка
			function lightedSelected(sIndex) {
				let n = activePanel ? leftListFileSystem.length : rightListFileSystem.length; // Количество элементов в активной панели
				if (n > sIndex) {
					if (activePanel) leftListFileSystem.selectedIndex = sIndex;
					else rightListFileSystem.selectedIndex = sIndex;
					changeSelectedFiles(); // Информация о выделенных файлах
				}
			}

			// ------------------------------------------------------------------------------------
			// Поиск файла / каталога по его имени на активной панели
			// name - искомое имя с полным путём
			// выход - индекс элемента в списке, либо -1, если не найден
			function searchFile(name) {
				let i;
				let strItem;
				let n = activePanel ? leftListFileSystem.length : rightListFilesArray.length; // Количество файлов в активной панели
				for (i = 0; i < n; i++) {
					if (activePanel) strItem = leftListFileSystem.options[i].value;
					else strItem = rightListFileSystem.options[i].value;
					if (strItem == name) break;
				}
				if (i == n) { // Не нашли по полному совпадению, тогда ищем по частичному
					for (i = 0; i < n; i++) {
						if (activePanel) strItem = leftListFileSystem.options[i].value;
						else strItem = rightListFileSystem.options[i].value;
						if (strItem.indexOf(name) == 0) break;
					}
				}
			return (i == n ? -1 : i);
			}
			
			// ------------------------------------------------------------------------------------
			// Подсветка выделенных файлов на активной панели в момент получения фокуса
			// и выключение подсветки выделенных файлов на пасивной панели
			function onSelectedFiles() {
				let n = activePanel ? leftListFilesArray.length : rightListFilesArray.length; // Количество файлов в активной панели
				for (let i = 0; i < n; i++) {
					if (activePanel) leftListFileSystem.options[i].style.background = null;
					else rightListFileSystem.options[i].style.background = null;
				}
				n = activePanel ? rightListFilesArray.length : leftListFilesArray.length; // Количество файлов в пасивной панели
				for (let i = 0; i < n; i++) {
					if (activePanel) {
						if (rightListFileSystem.options[i].selected) rightListFileSystem.options[i].style.background = inactiveBacklight;
					} else {
						if (leftListFileSystem.options[i].selected) leftListFileSystem.options[i].style.background = inactiveBacklight;
					}
				}
			}

			// ------------------------------------------------------------------------------------
			// Формирование строки-информации о выбранных файлах активной панели и сохранение выборки в массиве соответствующей панели
			function changeSelectedFiles() {
				let n = activePanel ? leftListFileSystem.options.length : rightListFileSystem.options.length; // Количество файлов в активной панели
				let selectedFiles = 0; // Количество выбранных файлов
				let sizeSelectedFiles = 0; // Общий размер выбранных файлов
				let messageSelectedFiles; // Строка-инфо о выбранных файлах
				for (let i = 0; i < n; i++) {
					if (activePanel ? leftListFileSystem.options[i].selected : rightListFileSystem.options[i].selected) {
						selectedFiles ++;
						sizeSelectedFiles += activePanel ? leftListFilesArray[i][2] : rightListFilesArray[i][2];
					}
				}
				if (selectedFiles > 1) messageSelectedFiles = "selected: " + selectedFiles + " files, " + readableSize(sizeSelectedFiles);
				else messageSelectedFiles = activePanel ? 
												(leftPanelView ? leftCurrentPath : "") + leftListFileSystem.options[leftListFileSystem.selectedIndex].text
												:
												(rightPanelView ? rightCurrentPath : "") + rightListFileSystem.options[rightListFileSystem.selectedIndex].text;

				if (activePanel) document.getElementById("leftSelectFilesStyles").innerHTML = messageSelectedFiles;
				else document.getElementById("rightSelectFilesStyles").innerHTML = messageSelectedFiles;
			}

			// ------------------------------------------------------------------------------------
			// Перестроение списков панелей с сохранением выделения
			function rebuildOption() {
				panelSizing(); // Отрисовка панелей
				getListFiles(); // Считывание списка файлов
				// Перестроение списка с сохранением выделения на неактивной панели
				activePanel = !activePanel;
				rebuildActivePanel();
				focusActivePanel(); // Фокус на активную панель
				// Перестроение списка на активной панели
				activePanel = !activePanel;
				rebuildActivePanel();
				focusActivePanel(); // Фокус на активную панель
			}

			// ------------------------------------------------------------------------------------
			// Перестроение списков панелей с сохранением выделения на неактивной панели
			// и выделение файла на активной панели
			// name - имя элемента списка, который необходимо выделить на активной панели
			// sIndex - номер элемента списка, который необходимо выделить на активной панели, если name == null
			function rebuildPanel(name, sIndex) {
				let n; // Количество файлов в активной панели
				// Перестроение списка с сохранением выделения на неактивной панели
				activePanel = !activePanel;
				rebuildActivePanel();
				focusActivePanel(); // Фокус на активную панель
				// Перестроение списка на активной панели
				activePanel = !activePanel;
				if (activePanel) {
					rebuildLeftPanel();
					n = leftListFileSystem.options.length - 1;
				} else {
					rebuildRightPanel();
					n = rightListFileSystem.options.length - 1;
				}
				if (name != null) {
					sIndex = searchFile(name); // Номер элемента списка, на который устанавливается курсор
					sIndex = sIndex == -1 ? 0 : sIndex;
				} else sIndex = sIndex > n ? n : sIndex;
				lightedSelected(sIndex); // Курсор на выбранный элемента списка
				focusActivePanel(); // Фокус на активную панель
			}

			// ------------------------------------------------------------------------------------
			// Перестроение списка активной панели с сохранением выделения
			function rebuildActivePanel() {
				let selectedFiles = new Array();
				let strItem;
				let n = activePanel ? leftListFileSystem.options.length : rightListFileSystem.options.length; // Количество файлов в активной панели
				for (let i = 0; i < n; i++) { // Запоминаем текущее выделение на панели во временный массив
					if (activePanel ? leftListFileSystem.options[i].selected : rightListFileSystem.options[i].selected) {
						if (activePanel) strItem = leftListFilesArray[i][0];
						else strItem = rightListFilesArray[i][0];
						if (strItem == "..") selectedFiles.push((activePanel ? leftListFilesArray[i][1] : rightListFilesArray[i][1]) + strItem);
						else selectedFiles.push(activePanel ? leftListFileSystem.options[i].value : rightListFileSystem.options[i].value);
					}
				}

				if (activePanel) rebuildLeftPanel();
				else rebuildRightPanel();
				let flag = false; // Флаг указывающий, что есть хоть один выделенный элемент после перестроения панели
				for (let i = 0; i < selectedFiles.length; i++) { // Восстанавливаяем выделение на панели из временного массив
					if (selectedFiles[i].endsWith("..") && (activePanel ? leftPanelView : rightPanelView)) { // если ".." и режим с каталогами
						// и путь к ".." равен текущему пути
						if ((selectedFiles[i].length - 2) == (activePanel ? leftCurrentPath.length : rightCurrentPath.length)) {
							// то выделяем 0-й элемент панели
							if (activePanel) leftListFileSystem.options[0].selected = true;
							else rightListFileSystem.options[0].selected = true;
							flag = true;
							continue;
						} else { // иначе ищем каталог
							selectedFiles[i] = selectedFiles[i].slice(0, selectedFiles[i].length - 2); // Отрезаем от имени поиска ".."
						}
					}
					n = searchFile(selectedFiles[i]); // Поиск ранее выделенного файла
					if (n != -1) {
						if (activePanel) leftListFileSystem.options[n].selected = true;
						else rightListFileSystem.options[n].selected = true;
						flag = true;
					}
				}
				if (!flag) { // Eсли не восстановили ни одного выделенния, то выделяем нулевой элемент списка
					if (activePanel) leftListFileSystem.options[0].selected = true;
					else rightListFileSystem.options[0].selected = true;
				}
				changeSelectedFiles();
			}

			// ------------------------------------------------------------------------------------
			// Перестроение списка левой панели
			function rebuildLeftPanel() {
				leftListFileSystem.options.length = 0; // Обнуление списка панели
				leftListFilesArray.length = 0; // Обнуление массивов со списком
				let leftNumberFilesSelect = 0; // Номер файла в списке панели
				let leftSlash = 0; // Позиция слэша в имени файла 
				// Если находимся не в корневом каталоге и включен режим отображения с каталогами, то добавляем в список ".." для выхода из каталога
				if (leftCurrentPath.length != 0 && leftPanelView) {
					leftListFilesArray[leftNumberFilesSelect] = [];
					leftListFilesArray[leftNumberFilesSelect][0] = ".."; // Строка для сортировки массива
					leftListFilesArray[leftNumberFilesSelect][1] = leftCurrentPath; // Текущий путь каталога
					leftListFilesArray[leftNumberFilesSelect][2] = 0; // Размер файла / файлов в каталоге
					leftSlash = leftCurrentPath.lastIndexOf("/", leftCurrentPath.length - 2); // Поиск в текущем пути предпоследнего слэша
					if (leftSlash == -1) leftListFilesArray[leftNumberFilesSelect][3] = ""; // Ecли не найден, то верхним уровнем является корневой каталог
					else leftListFilesArray[leftNumberFilesSelect][3] = leftCurrentPath.slice(0, leftSlash + 1); // Иначе каталог верхнего уровня
					leftNumberFilesSelect ++;
				}
				// Заполнение массива списком файлов по текущему пути
				for (let i = 0; i < nSPIFFS  ; i++) {
					let leftFlag = aSPIFFS[i].name.startsWith(leftCurrentPath); // Флаг принадлижности файла текущему пути
					// Позиция слэша в имени файла без учёта текущего пути, либо -1 если он отсутствует
					leftSlash = aSPIFFS[i].name.indexOf('/', leftCurrentPath.length);
					// Если файл принадлежит текущему пути и в имени файла отсутствуют каталоги или включен режим отображения развёрнутых каталогов
					if (leftFlag || !leftPanelView) {
						if ( ! (leftPanelView && aSPIFFS[i].name.slice(leftCurrentPath.length) == "..") ) {// если отображение со свёрнутыми каталогами, пропуск файлов "..", 
							if (leftSlash == -1 || !leftPanelView) { // файл или включен режим отображения развёрнутых каталогов
								leftListFilesArray[leftNumberFilesSelect] = [];
								if (leftSlash == -1 && leftPanelView) {
									// Чистое имя файла без учёта каталогов
									leftListFilesArray[leftNumberFilesSelect][1] = aSPIFFS[i].name.slice(leftCurrentPath.length);
									// Чистое имя файла без учёта каталогов в верхнем регистре для сортировки
									leftListFilesArray[leftNumberFilesSelect][0] = "1" + leftListFilesArray[leftNumberFilesSelect][1].toUpperCase();
								} else {
									// Полное имя, так как получено из SPIFFS ESP8266 если включен режим без каталогов
									leftListFilesArray[leftNumberFilesSelect][1] = aSPIFFS[i].name;
									// Полное имя в верхнем регистре для сортировки,
									// так как получено из SPIFFS ESP8266 если включен режим без каталогов
									leftListFilesArray[leftNumberFilesSelect][0] = "1" + aSPIFFS[i].name.toUpperCase();
								}
								leftListFilesArray[leftNumberFilesSelect][2] = aSPIFFS[i].size; // Размер файла в байтах
								leftListFilesArray[leftNumberFilesSelect][3] = aSPIFFS[i].name; // Полное имя, так как полкчено из ESP8266
								leftNumberFilesSelect ++;
							} else { // Часть имени файла содержит каталог
								let dir = aSPIFFS[i].name.slice(leftCurrentPath.length, leftSlash); // Чистое имя каталога
								let flag = false;
								// Поиск имени каталога в уже добавленных
								for (let n = 0; n < leftListFilesArray.length; n++) {
									if (leftListFilesArray[n][0].startsWith("0") && leftListFilesArray[n][1] == dir) { // Такой каталог уже добавлен в список
										leftListFilesArray[n][2] += aSPIFFS[i].size; // Размер файлов в каталоге
										flag = true;
										break;
									}
								}
								if (!flag) { // Такого каталога ещё нет в списке, добавляем...
									leftListFilesArray[leftNumberFilesSelect] = [];
									// Чистое имя каталога в верхнем регистре для сортировки
									leftListFilesArray[leftNumberFilesSelect][0] = "0" + dir.toUpperCase();
									// Чистое имя каталога
									leftListFilesArray[leftNumberFilesSelect][1] = dir;
									leftListFilesArray[leftNumberFilesSelect][2] = aSPIFFS[i].size; // Размер файлов в каталоге
									leftListFilesArray[leftNumberFilesSelect][3] = leftCurrentPath + dir + "/"; // Полный путь
									leftNumberFilesSelect ++;
								}
							}
						}
					}
				}
				leftListFilesArray.sort(); // Сортировка по имени
				// Построене списка файлов
				for (let i = 0; i < leftListFilesArray.length; i++) {
					if (leftListFilesArray[i][0] == "..") { // Выход на верхний уровень
						newElement = new Option(leftListFilesArray[i][0], leftListFilesArray[i][3]);
					}
					else if (leftListFilesArray[i][0].startsWith("0") && leftPanelView) { // Каталог и включен режим отображения каталогов
						// Имя каталога
						newElement = new Option('[' + leftListFilesArray[i][1] + '], ' + readableSize(leftListFilesArray[i][2]), leftListFilesArray[i][3]);
					} else { // Файл
						// Имя файла
						newElement = new Option(leftListFilesArray[i][1] + ', ' + readableSize(leftListFilesArray[i][2]), leftListFilesArray[i][3]);
					}
					leftListFileSystem.options[leftListFileSystem.options.length] = newElement;
				}
			}
			
			// ------------------------------------------------------------------------------------
			// Перестроение списка правой панели
			function rebuildRightPanel() {
				rightListFileSystem.options.length = 0; // Обнуление списка панели
				rightListFilesArray.length = 0; // Обнуление массивов со списком
				let rightNumberFilesSelect = 0; // Номер файла в списке панели
				let rightSlash = 0; // Позиция слэша в имени файла 
				// Если находимся не в корневом каталоге и включен режим отображения с каталогами, то добавляем в список ".." для выхода из каталога
				if (rightCurrentPath.length != 0 && rightPanelView) {
					rightListFilesArray[rightNumberFilesSelect] = [];
					rightListFilesArray[rightNumberFilesSelect][0] = ".."; // Строка для сортировки массива
					rightListFilesArray[rightNumberFilesSelect][1] = rightCurrentPath; // Текущий путь каталога
					rightListFilesArray[rightNumberFilesSelect][2] = 0; // Размер файла / файлов в каталоге
					rightSlash = rightCurrentPath.lastIndexOf("/", rightCurrentPath.length - 2); // Поиск в текущем пути предпоследнего слэша
					if (rightSlash == -1) rightListFilesArray[rightNumberFilesSelect][3] = ""; // Ecли не найден, то верхним уровнем является корневой каталог
					else rightListFilesArray[rightNumberFilesSelect][3] = rightCurrentPath.slice(0, rightSlash + 1); // Иначе каталог верхнего уровня
					rightNumberFilesSelect ++;
				}
				// Заполнение массива списком файлов по текущему пути
				for (let i = 0; i < nSPIFFS  ; i++) {
					let rightFlag = aSPIFFS[i].name.startsWith(rightCurrentPath); // Флаг принадлижности файла текущему пути
					// Позиция слэша в имени файла без учёта текущего пути, либо -1 если он отсутствует
					rightSlash = aSPIFFS[i].name.indexOf('/', rightCurrentPath.length);
					// Если файл принадлежит текущему пути и в имени файла отсутствуют каталоги или включен режим отображения развёрнутых каталогов
					if (rightFlag || !rightPanelView) {
						if ( ! (rightPanelView && aSPIFFS[i].name.slice(rightCurrentPath.length) == "..") ) {// если отображение со свёрнутыми каталогами, пропуск файлов "..", 
							if (rightSlash == -1 || !rightPanelView) { // файл или включен режим отображения развёрнутых каталогов
								rightListFilesArray[rightNumberFilesSelect] = [];
								if (rightSlash == -1 && rightPanelView) {
									// Чистое имя файла без учёта каталогов
									rightListFilesArray[rightNumberFilesSelect][1] = aSPIFFS[i].name.slice(rightCurrentPath.length);
									// Чистое имя файла без учёта каталогов в верхнем регистре для сортировки
									rightListFilesArray[rightNumberFilesSelect][0] = "1" + rightListFilesArray[rightNumberFilesSelect][1].toUpperCase();
								} else {
									// Полное имя, так как получено из SPIFFS ESP8266 если включен режим без каталогов
									rightListFilesArray[rightNumberFilesSelect][1] = aSPIFFS[i].name;
									// Полное имя в верхнем регистре для сортировки,
									// так как получено из SPIFFS ESP8266 если включен режим без каталогов
									rightListFilesArray[rightNumberFilesSelect][0] = "1" + aSPIFFS[i].name.toUpperCase();
								}
								rightListFilesArray[rightNumberFilesSelect][2] = aSPIFFS[i].size; // Размер файла в байтах
								rightListFilesArray[rightNumberFilesSelect][3] = aSPIFFS[i].name; // Полное имя, так как полкчено из ESP8266
								rightNumberFilesSelect ++;
							} else { // Часть имени файла содержит каталог
								let dir = aSPIFFS[i].name.slice(rightCurrentPath.length, rightSlash); // Чистое имя каталога
								let flag = false;
								// Поиск имени каталога в уже добавленных
								for (let n = 0; n < rightListFilesArray.length; n++) {
									if (rightListFilesArray[n][0].startsWith("0") && rightListFilesArray[n][1] == dir) { // Такой каталог уже добавлен в список
										rightListFilesArray[n][2] += aSPIFFS[i].size; // Размер файлов в каталоге
										flag = true;
										break;
									}
								}
								if (!flag) { // Такого каталога ещё нет в списке. добавляем...
									rightListFilesArray[rightNumberFilesSelect] = [];
									// Чистое имя каталога в верхнем регистре для сортировки
									rightListFilesArray[rightNumberFilesSelect][0] = "0" + dir.toUpperCase();
									// Чистое имя каталога
									rightListFilesArray[rightNumberFilesSelect][1] = dir;
									rightListFilesArray[rightNumberFilesSelect][2] = aSPIFFS[i].size; // Размер файлов в каталоге
									rightListFilesArray[rightNumberFilesSelect][3] = rightCurrentPath + dir + "/"; // Полный путь
									rightNumberFilesSelect ++;
								}
							}
						}
					}
				}
				rightListFilesArray.sort(); // Сортировка по имени
				// Построене списка файлов
				for (let i = 0; i < rightListFilesArray.length; i++) {
					if (rightListFilesArray[i][0] == "..") { // Выход на верхний уровень
						newElement = new Option(rightListFilesArray[i][0], rightListFilesArray[i][3]);
					}
					else if (rightListFilesArray[i][0].startsWith("0") && rightPanelView) { // Каталог и включен режим отображения каталогов
						// Имя каталога
						newElement = new Option('[' + rightListFilesArray[i][1] + '], ' + readableSize(rightListFilesArray[i][2]), rightListFilesArray[i][3]);
					} else { // Файл
						// Имя файла
						newElement = new Option(rightListFilesArray[i][1] + ', ' + readableSize(rightListFilesArray[i][2]), rightListFilesArray[i][3]);
					}
					rightListFileSystem.options[rightListFileSystem.options.length] = newElement;
				}
			}
			
			// ------------------------------------------------------------------------------------
			// Открытие файла по Enter и dblclick
			// При нажатой клавише <Shift> файл открывается в новом окне / вкладке
			function runOption(newTab){
				let selectedIndex = activePanel ? leftListFileSystem.options.selectedIndex : rightListFileSystem.options.selectedIndex; // Индекс выбранного файла
				let currentPath = activePanel ? leftCurrentPath : rightCurrentPath; // Текущий путь в активной панели
				let textItem = activePanel ? leftListFilesArray[selectedIndex][0] : rightListFilesArray[selectedIndex][0]; // Выбранный элемент списка

				if (textItem.startsWith('0') || textItem == "..") { // Вход/выход в/из каталог(а)
					if (newTab) return; // Если удерживается Shift, то ничего не делаем
					else {
						if (activePanel) {
							leftCurrentPath = leftListFilesArray[selectedIndex][3];
							rebuildLeftPanel();
						} else {
							rightCurrentPath = rightListFilesArray[selectedIndex][3];
							rebuildRightPanel();
						}
						let sIndex = (textItem != "..") ? 0 : searchFile(currentPath); // Номер элемента списка, на который устанавливается курсор
						sIndex = sIndex == -1 ? 0 : sIndex;
						lightedSelected(sIndex); // Курсор на выбранный элемента списка
					}
				} else {
					let link = document.createElement('a');
					// Имя выбранного файла для запуска
					let name = activePanel ? leftListFileSystem.options[selectedIndex].value : rightListFileSystem.options[selectedIndex].value;
					link.setAttribute('href', deviceAddress + '/' + name);
					if (newTab) link.setAttribute('target', '_blank');
					link.click();
				}
			}

			// ------------------------------------------------------------------------------------
			// Открытия файла по dblclick
			function runOptionMouse(){
				runOption(keyShift);
				keyShift = false;
			}
			
			// ------------------------------------------------------------------------------------
			// Поиск файла и в случае, если такой файл существует, вывод запроса на его перезапись
			// Если запрос утвердительный - удаление файла
			// Если файл является выходом из каталога ".." (двоеточие),
			// то запрос на перезапись не выводится, такой файл просто удаляется
			// Вход: fileName - имя искомого файла
			// Выход: true - файл не найден, либо запрос подтверждён и найденый файл удалён
			//        false - запрос на перезапись отменён
			function rewriteRequest(fileName) {
				let flag = true;
				for (let i = 0; i < aSPIFFS.length; i++) {
					if (aSPIFFS[i].name == fileName) {
						if ( ! fileName.endsWith("..") ) {
							setLoading(false); // Выключение индикации файловой операции
							if ( ! confirm("overwrite file: " + fileName + " ?") ) {
								flag = false;
								break;
							}
						}
						httpDelete(fileName);
						if (httpSatus != 200) flag = false;
						break;
					}
				}
				return flag;
			}
			
			// ------------------------------------------------------------------------------------
			// Выполнение действий над выбранными файлами в списке
			// operation =	del - удаление
			//				ren - переименование
			// 				down - скачивание
			//				move - перемещение
			//				copy - копирование
			function fileListOperations(operation) {
				let n = activePanel ? leftListFilesArray.length : rightListFilesArray.length; // Количество элементов в активной панели
				let indexSelectFile = 0; // Индекс последнего выбранного файла
				let currentPath  = activePanel ? leftCurrentPath : rightCurrentPath; // Текущий путь в активной панели
				let listRebuild = false; // Необходимость перечитывания списка файлов
				let newName; // Новое имя элемента в операциях переименования / перемещения
				let srcName; // Имя выбранного элемента с полным путем, так как оно записано в SPIFFS
				let nameItem; // Имя выбранного элемента, так как оно отображается в панели

				// Перебор файлов из списка активной панели
				for (let i = 0; i < n; i++) {
					if (activePanel ? leftListFileSystem.options[i].selected : rightListFileSystem.options[i].selected) { // Если элемент выбран
						indexSelectFile = i;
						srcName = activePanel ? leftListFileSystem.options[i].value : rightListFileSystem.options[i].value;
						nameItem = activePanel ? leftListFilesArray[i][1] : rightListFilesArray[i][1];
						// Пропуск ".."
						if ((activePanel ? leftListFilesArray[i][0] : rightListFilesArray[i][0]) == "..") continue;

						// Если операция переименования, то запрос на новое имя
						if (operation == "ren") {
							// Запрос ввода нового имени
							setLoading(false); // Выключение индикации файловой операции
							let correctName = false;
							while (!correctName) { // Ввод и проверка нового имени элемента
								newName = prompt("Rename '" + srcName + "' to:", nameItem);
								if (nameItem == null) continue; // Отмена ввода
								correctName = verifiName(newName, currentPath);
								}

							// Если новое имя начинается с "/", то оно имеет абсолютный путь, иначе к новому имени цепляем текущий путь
							newName = newName.startsWith('/') ? newName.slice(1) : currentPath + newName;
							// Если исходный элемент каталог
							if (activePanel ? leftListFilesArray[i][0].startsWith('0') : rightListFilesArray[i][0].startsWith('0')) {
								newName = newName.endsWith("/") ? newName : newName + "/";
							} else {
								if (newName.endsWith("/")) newName = newName + "..";
							}
							if (srcName == newName) { // Если новое имя равно исходному, то переименовывать нечего
								alert("Unable to rename!");
								continue;
							}
						}
						// Если операция перемещения или копирования
						if (operation == "move" || operation == "copy") {
							if (leftCurrentPath == rightCurrentPath) { // Если на обоих панелях одинаковые пути
								alert("Impossible to " + operation + "!"); // Операция не возможна
								continue;
							}
							// Новое расположение файла / каталога
							newName = (activePanel ? rightCurrentPath : leftCurrentPath) + nameItem;
						}

						// Обработка каталога
						if (activePanel ? leftListFilesArray[i][0].startsWith('0') : rightListFilesArray[i][0].startsWith('0')) {
							if (operation == "del") {
								// Запрос на удаление каталога
								if (! confirm("Delete directory " + nameItem + " with all contents?") ) continue;
							}
							for (let j = 0; j < aSPIFFS.length; j++) { // Цикл поиска элементов принадлижвщих каталогу
								// Элемент принадлижит обрабатываемому каталогу?
								if (aSPIFFS[j].name.startsWith(currentPath + nameItem + "/")) {
									switch (operation) {
										case "del" :
											httpDelete(aSPIFFS[j].name); // Удаление элемента каталога
											if (httpSatus == 200) listRebuild = true;
										break;
										case "down" :
											if (! aSPIFFS[j].name.endsWith("..")) httpDownload(aSPIFFS[j].name ); // Скачивание элемента каталога
										break;
										default : // Переименование, перемещение, копирование
											newName = newName.endsWith("/") ? newName.slice(0, newName.length - 1) : newName;
											// Проверка на существование файла
											if (rewriteRequest(newName + aSPIFFS[j].name.slice(srcName.length - 1))) {
												if (verifiName(newName + aSPIFFS[j].name.slice(srcName.length - 1), "")) { // Проверка на длину
													if (operation == "copy") httpCopy(aSPIFFS[j].name, newName + aSPIFFS[j].name.slice(srcName.length - 1)); // Копирование
													else httpRename(aSPIFFS[j].name, newName + aSPIFFS[j].name.slice(srcName.length - 1)); // Переименование, перемещение
												}
												if (httpSatus == 200) listRebuild = true;
											}
										break;
									}
								}
							}
							if (operation == "del") {
								// Если в неактивной панели открыт путь удаляемого каталога, то присваиваем путь активной панели
								if (activePanel) {
									if (rightCurrentPath.startsWith(leftCurrentPath + nameItem + "/")) rightCurrentPath = leftCurrentPath;
								} else {
									if (leftCurrentPath.startsWith(rightCurrentPath + nameItem + "/")) leftCurrentPath = rightCurrentPath;
								}
							}
						} else { // Обработка файла
							switch (operation) {
								case "del" :
									// Удаление файла
									httpDelete(srcName);
									if (httpSatus == 200) listRebuild = true;
								break;
								case "down" :
									// Скачивание файла
									if (srcName != "..") {
										httpDownload(srcName);
									}
								break;
								default : // Копирование, переименование, перемещение
									if (rewriteRequest(newName)) { // Проверка на существование файла
										if (verifiName(newName, "")) {
											if (operation == "copy") httpCopy(srcName, newName);
											else httpRename(srcName, newName);
											if (httpSatus == 200) listRebuild = true;
										}
									}
								break;
							}
						}
					}
				}
				if (listRebuild) {
					getListFiles(); // Считывание списка файлов
					rebuildPanel(null, indexSelectFile); // Перестроение панелей
				} else {
					lightedSelected(indexSelectFile);
				}
			}

			// Обработка события переключения левого списка
			function leftListOption() {
				listOption(49);
			}

			// Обработка события переключения правого списка
			function rightListOption() {
				listOption(50);
			}
			
			// Обработка события переключения списка
			function listOption(id){
				let aPanel = activePanel; // Сохраняем флаг активной панели
				if (id == 49) { // Left panel view <Alt>+<Ctrl>+<1>
					leftPanelView = !leftPanelView; // Инвертируем режим отображения панели
					activePanel = true; // Левая панель активная
					// Путь к имени файла, на котором находится курсор
					leftCurrentPath = leftPanelView ? 
						leftListFileSystem.options[leftListFileSystem.selectedIndex].value.slice(0, leftListFileSystem.options[leftListFileSystem.selectedIndex].value.lastIndexOf("/") + 1) : "";
				} else { // Right panel view <Alt>+<Ctrl>+<2>
					rightPanelView = !rightPanelView; // Инвертируем режим отображения панели
					activePanel = false; // Правая панель активная
					// Путь к имени файла, на котором находится курсор
					rightCurrentPath = rightPanelView ? 
						rightListFileSystem.options[rightListFileSystem.selectedIndex].value.slice(0, rightListFileSystem.options[rightListFileSystem.selectedIndex].value.lastIndexOf("/") + 1) : "";
				}
				focusActivePanel(); // Фокус на активную панель
				rebuildActivePanel();
				activePanel = aPanel; // Восстанавливаяем флаг активной панели
				focusActivePanel(); // Фокус на активную панель
			}

			// Обработка события форматирования SPIFFS ESP8266
			function formatOption(){
				if (confirm("Format SPIFFS?") ) {
					httpFormat();
					getListFiles();
					rebuildLeftPanel();
					rebuildRightPanel();
				}
			}

			// Обработка события выхода в корневой каталог
			function rootOption(){
				// Самый первый каталог в текущем пути активной панели
				let nameDir = activePanel ? leftCurrentPath.slice(0, leftCurrentPath.indexOf("/")) : rightCurrentPath.slice(0, rightCurrentPath.indexOf("/"));
				let lengthPath = activePanel ? leftCurrentPath.length : rightCurrentPath.length;
				if (activePanel) leftCurrentPath = "";
				else rightCurrentPath = "";
				if (lengthPath != 0) rebuildPanel(nameDir);
			}

			// Обработка события скачивания файлов из SPIFFS ESP8266
			function downloadOption(){
				fileListOperations("down");
			}

			// Обработка события удаления файлов из SPIFFS ESP8266
			function deleteOption(){
				if (confirm("Do you reale want to delete the selected file(s)?")) fileListOperations("del");
			}

			// Обработка события переименование файлов в SPIFFS ESP8266
			function renameOption(){
				fileListOperations("ren");
			}

			// Обработка события перемещения файлов в SPIFFS ESP8266
			function moveOption(){
				if (confirm("Move selected items?")) fileListOperations("move");
			}

			// Обработка события копирования файлов в SPIFFS ESP8266
			function copyOption(){
				if (confirm("Copy selected items?")) fileListOperations("copy");
			}

			// ------------------------------------------------------------------------------------
			// Создания нового файла/каталога в SPIFFS ESP8266
			// Если имя заканчивается "/", то создаётся каталог с файлом "..", иначе просто файл нулевой длины
			// Если имя начинается с "/", то файл/каталог создается в корне, иначе в текущем пути
			function newItemOption(){
				let currentPath = activePanel ? leftCurrentPath : rightCurrentPath; // Текущий путь в активной панели

				let correctName = false;
				let name = "";
				while (!correctName) { // Ввод и проверка имени нового элемента
					name = prompt("New SPIFFS item:", name);
					if (name == null) return; // Нажата кнопка <Отмена>
					correctName = verifiName(name, currentPath);
				}

				if (!name.startsWith("/")) name = currentPath + name; // Создание элемента в текущем пути
				else name = name.slice(1, name.length); // Создание элемента в корневой директории
				if (name.endsWith("/")) { // Попытка создать каталог, проверяем, существует ли такой в системе?
					for (let i = 0; i < nSPIFFS  ; i++) {
						if (aSPIFFS[i].name.indexOf(name) == 0) {
							alert ("Directory " + name.slice(0, name.length - 1) + " exists!");
							return;
						}
					}
					name = name + "..";
				}
				for (let i = 0; i < nSPIFFS  ; i++) {
					if (aSPIFFS[i].name == name) {
						alert ("File " + name + " exists!");
						return;
					}
				}
				httpNewItem(name); // Новый элемент SPIFFS
				getListFiles(); // Считываем список файлов

				if (httpSatus == 200) { // Успешно создан
					// Если создали каталог и отображение панели с каталогами, то от имени поиска отрезаем ..
					if (name.endsWith("..") && (activePanel ? leftPanelView : rightPanelView)) name = name.slice(0, name.length - 2);
					rebuildPanel(name); // Перестроение панелей
				}
			}

			// ------------------------------------------------------------------------------------
			// Загрузка файлов в ESP8266
			function uploadOption() {
				let fullName;
				let success = "";  // Имя последнего удачно загруженного файла
				
				let aFiles = document.getElementById("inputFile").files; // Массив с выбранными файлами для загрузки 

				// Цикл по выбранным файлам
				for (let i = 0; i < aFiles.length; i++) {
					fullName = (activePanel ? leftCurrentPath : rightCurrentPath) + aFiles[i].name;
					if (rewriteRequest(fullName)) { // Проверка на существование файла
						if (verifiName(fullName, "")) {
							httpUpload(aFiles[i], fullName); // Загружаем
							if (httpSatus == 200) success = aFiles[i].name; // Успешно загружен
						}
					}
				}
				if (success.length > 0) { // Если есть успешно загруженные файлы
					getListFiles(); // Считывание списка файлов
					success = (activePanel ? leftCurrentPath : rightCurrentPath) + success; // Текущий путь к имени файла
					rebuildPanel(success); // Перестроение панелей
				}
			}

			// ------------------------------------------------------------------------------------
			// Установка фокуса на активную панель
			function focusActivePanel() {
				if (activePanel) leftListFileSystem.focus();
				else rightListFileSystem.focus();
			}
			
			
			// ------------------------------------------------------------------------------------
			// Получение фокуса левой панелью
			function leftFocus(){
				activePanel = true;
				onSelectedFiles();
			}

			// ------------------------------------------------------------------------------------
			// Получение фокуса правой панелью
			function rightFocus(){
				activePanel = false;
				onSelectedFiles();
			}

			// Открытие формы выбора файла
			function upLoadOption(){
				input.click();
			}

			// Действия после загрузки страницы
			function onBodyLoad(){
				if (location.protocol == "http:") { // ficon запущен с esp
					deviceAddress = location.origin;
				} else { // ficon запущен с компьютера
					let correctIP = false;
					let regIP = /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/;
					let ipDevice = deviceAddress;
					while (!correctIP) { // Ввод и проверка корректности IP-адреса
						ipDevice = prompt("ip address of the device:", ipDevice);
						correctIP = regIP.test(ipDevice);
					}
					deviceAddress = "http://" + ipDevice;
				}
								
				panelSizing(); // Отрисовка панелей
				getListFiles();
				rebuildLeftPanel();
				rebuildRightPanel();

				activePanel = false; // Активная панель - правая
				lightedSelected(0); // Подсветка первого элемента правой панели
				activePanel = true; // Активная панель - левая
				lightedSelected(0); // Подсветка первого элемента левой панели

				leftListFileSystem.focus(); // Фокус на левую панель
			}


		</script>
	</head>
	
	<body onload="onBodyLoad()">
			<p><input id="inputFile" type="file" onchange="uploadOption()" multiple style="position:absolute; top:-999px; visibility:hidden"/></p>
			<div id="titleStyles">FiCon v1.00 by lostar-igor</div>
			<div id="keyStyles">
				<input type="button" id="leftListButton" value="ᒯ" />
				<input type="button" id="rootButton" value="/" />
				<input type="button" id="rebuildButton" value="֍" />
				<input type="button" id="upLoadButton" value="Upload" />
				<input type="button" id="downloadButton" value="downLoad" />
				<input type="button" id="copyButton" value="Copy" />
				<input type="button" id="renameButton" value="Rename" />
				<input type="button" id="moveButton" value="Move" />
				<input type="button" id="deleteButton" value="Delete" />
				<input type="button" id="newItemButton" value="newItem" />
				<input type="button" id="formatButton" value="Format" />
				<input type="button" id="rightListButton" value="ᒬ" />
			</div>

			<div id="leftListFilesStyles">
				<div>
				<select id="leftListFilesSelect" size="0" multiple>
				</select>
				</div>
				<div id="leftSelectFilesStyles"></div>
			</div>
			<div id="rightListFilesStyles">
				<div>
				<select id="rightListFilesSelect" size="0" multiple>
				</select>
				</div>
				<div id="rightSelectFilesStyles"></div>
			</div>
			<div id="statusFilesStyles"></div>

		<div id="loading"><span id="loading-msg"></span><br/><div class="spinner-anim">Loading...</div></div>
	</body>
	
	<script>
		// Глобальные переменные
		let leftListFileSystem = document.getElementById("leftListFilesSelect"); // Список файлов левой панели
		leftListFileSystem.addEventListener("change", changeSelectedFiles); // Функция вызываемая при перемещении по списку файлов
		leftListFileSystem.addEventListener("keyup", hotKeyUp()); // Обработка горячих клавиш в списке файлов (отпускание клавиши)
		leftListFileSystem.addEventListener("keydown", hotKeyDown()); // Обработка горячих клавиш в списке файлов (нажатие клавиши)
		leftListFileSystem.addEventListener("dblclick", runOptionMouse); // Обработка двойного клика на файле
		leftListFileSystem.addEventListener("focus", leftFocus); // Обработка получения фокуса
		let rightListFileSystem = document.getElementById("rightListFilesSelect"); // Список файлов правой панели
		rightListFileSystem.addEventListener("change", changeSelectedFiles); // Функция вызываемая при перемещении по списку файлов
		rightListFileSystem.addEventListener("keyup", hotKeyUp()); // Обработка горячих клавиш в списке файлов (отпускание клавиши)
		rightListFileSystem.addEventListener("keydown", hotKeyDown()); // Обработка горячих клавиш в списке файлов (нажатие клавиши)
		rightListFileSystem.addEventListener("dblclick", runOptionMouse); // Обработка двойного клика на файле
		rightListFileSystem.addEventListener("focus", rightFocus); // Обработка получения фокуса

		let input = document.querySelector("#inputFile"); // Скрытая кнопка вызова окна выбора файлов
		let rootButton = document.getElementById("rootButton"); // Кнопка выхода в корневой каталог
		rootButton.addEventListener("click", rootOption); // Обработка нажатия кнопки выхода в корневой каталог
		let rebuildButton = document.getElementById("rebuildButton"); // Кнопка обновления и престроения панелей
		rebuildButton.addEventListener("click", rebuildOption); // Обработка нажатия кнопки обновления и престроения панелей
		let upLoadButton = document.getElementById("upLoadButton"); // Кнопка загрузки файлов
		upLoadButton.addEventListener("click", upLoadOption); // Обработка нажатия кнопки загрузки файлов
		let downloadButton = document.getElementById("downloadButton");	// Кнопка скачивания файлов
		downloadButton.addEventListener("click", downloadOption); // Обработка нажатия кнопки скачивания файлов
		let deleteButton = document.getElementById("deleteButton");	// Кнопка удаления файлов
		deleteButton.addEventListener("click", deleteOption); // Обработка нажатия кнопки удаления файлов
		let renameButton = document.getElementById("renameButton");	// Кнопка переименования файлов
		renameButton.addEventListener("click", renameOption); // Обработка нажатия кнопки переименования файлов
		let moveButton = document.getElementById("moveButton");	// Кнопка переимещения файлов
		moveButton.addEventListener("click", moveOption); // Обработка нажатия кнопки перемещения файлов
		let copyButton = document.getElementById("copyButton");	// Кнопка копирования файлов
		copyButton.addEventListener("click", copyOption); // Обработка нажатия кнопки копирования файлов
		let newItemButton = document.getElementById("newItemButton");	// Кнопка создания нового каталога
		newItemButton.addEventListener("click", newItemOption); // Обработка нажатия кнопки создания нового каталога
		let formatButton = document.getElementById("formatButton");	// Кнопка форматирования ФС
		formatButton.addEventListener("click", formatOption); // Обработка нажатия кнопки форматирования ФС
		let leftListButton = document.getElementById("leftListButton");	// Кнопка переключения левого списка
		leftListButton.addEventListener("click", leftListOption); // Обработка нажатия кнопкок переключения списков
		let rightListButton = document.getElementById("rightListButton");	// Кнопка переключения правого списка
		rightListButton.addEventListener("click", rightListOption); // Обработка нажатия кнопкок переключения списков
		// Активная панель: левая - true; правая - false
		let activePanel = true;
		// Вид панели: свёрнуты каталоги - true; развёрнуты - false
		let leftPanelView = true;
		let rightPanelView = true;
		// Текущий путь для левой и правой панели
		let leftCurrentPath = "";
		let rightCurrentPath = "";
		// Массив с именами файлов, считанный из SPIFFS ESP8266
		// aSPIFFS[i].type - тип (всегда равен "file")
		// aSPIFFS[i].name - имя файла
		// aSPIFFS[i].size - размер файла в байтах
		let aSPIFFS = new Array();
		let nSPIFFS  ; // Количество файлов в SPIFFS
		// Массив с именами файлов (каталогов) и их размерами для левой и правой панели
		// для каталогов:
		// [i][0] - имя каталога, в начале имени добавлен символ 0 для сортировки и все символы преобразуются в верхний регистр, напимер - 0DIR3
		// [i][1] - имя каталога, напимер - Dir3
		// [i][2] - размер файлов в каталоге в байтах
		// [i][3] - полный путь, включая сам каталог, например Dir1/Dir2/Dir3/
		//	для файлов:
		// [i][0] - имя файла, в начале имени добавлен символ 1 и все символы преобразуются в верхний регистр для сортировки, напимер - 1FILE.EXT
		// [i][1] - имя файла, напимер - file.ext
		// [i][2] - размер файла в байтах
		// [i][3] - имя файла, так как оно хранится в файловой систее SPIFFS, например - file.ext, либо Dir/file.ext
		// для выхода из каталога на уровень вверх ".."
		// [i][0] - .. (строка две точки)
		// [i][1] - Dir1/Dir2/Dir3/ (текущий путь каталога)
		// [i][2] - 0
		// [i][3] - полный путь к каталогу верхнего уровня, например Dir1/Dir2/, если каталогом верхнего уровня является корневрй, то пустая строка
		let leftListFilesArray = new Array();
		let rightListFilesArray = new Array();
		
		let freeSizeFS; // Свободное место в SPIFFS в байтах
		let httpSatus; // Последний возвращенный сервером результат запроса
		let keyShift = false; // Состояние клавиши <Shift>
		// Строка градиента выделенных строк на неактивной панели
		const inactiveBacklight = "linear-gradient(LightGrey, Silver)";
		// введённый IP-адрес ESP8266, если запущено с компьютера
		let deviceAddress = '';
		
	</script>
</html>
